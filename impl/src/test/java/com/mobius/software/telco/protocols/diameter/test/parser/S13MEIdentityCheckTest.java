package com.mobius.software.telco.protocols.diameter.test.parser;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import com.mobius.software.telco.protocols.diameter.TgppAvpCodes;
import com.mobius.software.telco.protocols.diameter.VendorIDs;
import com.mobius.software.telco.protocols.diameter.commands.DiameterMessage;
import com.mobius.software.telco.protocols.diameter.commands.s13.MEIdentityCheckRequest;
import com.mobius.software.telco.protocols.diameter.exceptions.DiameterException;
import com.mobius.software.telco.protocols.diameter.impl.commands.DiameterErrorAnswerImpl;
import com.mobius.software.telco.protocols.diameter.impl.commands.DiameterErrorAnswerWithSessionImpl;
import com.mobius.software.telco.protocols.diameter.impl.commands.s13.MEIdentityCheckRequestImpl;
import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterOctetStringImpl;
import com.mobius.software.telco.protocols.diameter.impl.primitives.sh.MSISDNImpl;
import com.mobius.software.telco.protocols.diameter.parser.DiameterParser;
import com.mobius.software.telco.protocols.diameter.primitives.DiameterAvpKey;
import com.mobius.software.telco.protocols.diameter.primitives.DiameterUnknownAvp;
import com.mobius.software.telco.protocols.diameter.primitives.common.AuthSessionStateEnum;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

public class S13MEIdentityCheckTest
{
	private ByteBuf meIdentityCheckRequestMessage=Unpooled.wrappedBuffer(new byte[] {0x01,0x00,0x01,(byte)0x80,(byte)0xc0,0x00,0x01,0x44,0x01,0x00,0x00,0x24,0x00,0x70,0x43,0x2e,0x51,0x35,0x34,(byte)0xd7,0x00,0x00,0x01,0x07,0x40,0x00,0x00,0x4a,0x70,0x73,0x64,0x73,0x63,0x73,0x63,0x66,0x30,0x31,0x2e,0x69,0x6d,0x73,0x2e,0x6d,0x6e,0x63,0x30,0x30,0x37,0x2e,0x6d,0x63,0x63,0x36,0x33,0x34,0x2e,0x33,0x67,0x70,0x70,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67,0x3b,0x31,0x37,0x32,0x33,0x36,0x34,0x38,0x30,0x3b,0x33,0x31,0x30,0x32,0x37,0x38,0x31,0x35,0x35,0x3b,0x35,0x33,0x00,0x00,0x00,0x00,0x01,0x15,0x40,0x00,0x00,0x0c,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x08,0x40,0x00,0x00,0x34,0x70,0x73,0x64,0x73,0x63,0x73,0x63,0x66,0x30,0x31,0x2e,0x69,0x6d,0x73,0x2e,0x6d,0x6e,0x63,0x30,0x30,0x37,0x2e,0x6d,0x63,0x63,0x36,0x33,0x34,0x2e,0x33,0x67,0x70,0x70,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67,0x00,0x00,0x01,0x28,0x40,0x00,0x00,0x29,0x69,0x6d,0x73,0x2e,0x6d,0x6e,0x63,0x30,0x30,0x37,0x2e,0x6d,0x63,0x63,0x36,0x33,0x34,0x2e,0x33,0x67,0x70,0x70,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67,0x00,0x00,0x00,0x00,0x00,0x01,0x1b,0x40,0x00,0x00,0x2a,0x64,0x6d,0x63,0x31,0x2e,0x6d,0x6e,0x63,0x30,0x30,0x37,0x2e,0x6d,0x63,0x63,0x36,0x33,0x34,0x2e,0x33,0x67,0x70,0x70,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x17,0x36,0x33,0x34,0x30,0x37,0x30,0x35,0x37,0x39,0x35,0x31,0x32,0x32,0x38,0x35,0x00,0x00,0x00,0x05,0x79,(byte)0xc0,0x00,0x00,0x28,0x00,0x00,0x28,(byte)0xaf,0x00,0x00,0x05,0x7a,(byte)0xc0,0x00,0x00,0x1b,0x00,0x00,0x28,(byte)0xaf,0x38,0x36,0x35,0x39,0x31,0x32,0x30,0x34,0x34,0x32,0x32,0x31,0x37,0x34,0x30,0x00,0x00,0x00,0x02,(byte)0xbd,(byte)0x80,0x00,0x00,0x12,0x00,0x00,0x28,(byte)0xaf,0x42,0x19,0x32,(byte)0x94,(byte)0x99,0x19,0x00,0x00,0x00,0x00,0x01,0x1a,0x40,0x00,0x00,0x34,0x70,0x73,0x64,0x73,0x63,0x73,0x63,0x66,0x30,0x31,0x2e,0x69,0x6d,0x73,0x2e,0x6d,0x6e,0x63,0x30,0x30,0x37,0x2e,0x6d,0x63,0x63,0x36,0x33,0x34,0x2e,0x33,0x67,0x70,0x70,0x6e,0x65,0x74,0x77,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67 });
	
	@Test
	public void testIdentityCheckRequest() throws DiameterException
	{		
		DiameterParser diameterParser=new DiameterParser(this.getClass().getClassLoader(), Arrays.asList(new Class<?>[] { DiameterErrorAnswerImpl.class , DiameterErrorAnswerWithSessionImpl.class }),Package.getPackage("com.mobius.software.telco.protocols.diameter.impl.primitives"));
		
		//make sure classes are loaded
		Class<?> clazz = MEIdentityCheckRequestImpl.class;
		Class<?> avpClass = DiameterOctetStringImpl.class;
		assertNotNull(clazz);
		assertNotNull(avpClass);
		
		diameterParser.registerApplication(this.getClass().getClassLoader(), Package.getPackage("com.mobius.software.telco.protocols.diameter.impl.commands.s13"));
		
		meIdentityCheckRequestMessage.resetReaderIndex();
		DiameterMessage decodeMessage = diameterParser.decode(meIdentityCheckRequestMessage, false);
		assertNotNull(decodeMessage);
		assertTrue(decodeMessage instanceof MEIdentityCheckRequest);
		MEIdentityCheckRequest mer = (MEIdentityCheckRequest)decodeMessage;
		assertFalse(mer.getIsRetransmit());
		assertTrue(mer.getIsProxyable());
		assertNotNull(mer.getEndToEndIdentifier());
		assertNotNull(mer.getHopByHopIdentifier());
		assertEquals(mer.getEndToEndIdentifier(),new Long(0x513534d7));
		assertEquals(mer.getHopByHopIdentifier(),new Long(0x0070432e));
		assertNotNull(mer.getSessionId());
		assertEquals(mer.getSessionId(),"psdscscf01.ims.mnc007.mcc634.3gppnetwork.org;17236480;310278155;53");
		assertNotNull(mer.getAuthSessionState());
		assertEquals(mer.getAuthSessionState(),AuthSessionStateEnum.NO_STATE_MAINTAINED);
		assertNotNull(mer.getOriginHost());
		assertEquals(mer.getOriginHost(),"psdscscf01.ims.mnc007.mcc634.3gppnetwork.org");
		assertNotNull(mer.getOriginRealm());
		assertEquals(mer.getOriginRealm(),"ims.mnc007.mcc634.3gppnetwork.org");
		assertNotNull(mer.getDestinationRealm());
		assertEquals(mer.getDestinationRealm(),"dmc1.mnc007.mcc634.3gppnetwork.org");
		assertNotNull(mer.getUsername());
		assertEquals(mer.getUsername(),"634070579512285");
		assertNotNull(mer.getTerminalInformation());
		assertNotNull(mer.getTerminalInformation().getIMEI());
		assertEquals(mer.getTerminalInformation().getIMEI(),"865912044221740");
		
		DiameterAvpKey avpKey=new DiameterAvpKey(VendorIDs.TGPP_ID, TgppAvpCodes.MSISDN);
		List<DiameterUnknownAvp> msisdnList = mer.getOptionalAvps(avpKey);
		assertNotNull(msisdnList);
		assertEquals(msisdnList.size(),1);
		MSISDNImpl msisdn = new MSISDNImpl("1234");
		msisdn.decode(msisdnList.get(0).getValue(), msisdnList.get(0).getValue().readableBytes());
		assertEquals(msisdn.getAddress(),"249123499991");
		assertNotNull(mer.getRouteRecords());
		assertEquals(mer.getRouteRecords().size(),1);
		assertEquals(mer.getRouteRecords().get(0),"psdscscf01.ims.mnc007.mcc634.3gppnetwork.org");	
		
		System.out.println(diameterParser.printMessage(mer));
	}
}